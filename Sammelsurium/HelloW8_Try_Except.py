# Обработка исключений
# ошибки выполнения (runtime error) еще называются исключениями.
#---------------------------------------------------------------------------------------------
# Рассмотрим обработку исключения на примере преобразовании строки в число:
try:
    number = int(input("Введите число: "))
    print("Введенное число:", number)
except:
    print("Преобразование прошло неудачно") #if in try все выполняется нормально, исключение не возникает, и соответственно блок except не выполняется
print("Завершение программы")

#---------------------------------------------------------------------------------------------
# В примере выше обрабатывались сразу все исключения, которые могут возникнуть в коде.
# Однако мы можем конкретизировать тип обрабатываемого исключения, указав его после слова except:
# (например ZeroDivisionError, ValueError или KeyError)
try:
    number = int(input("Введите число: "))
    print("Введенное число:", number)
except ValueError:
    print("Преобразование прошло неудачно")
print("Завершение программы")

#---------------------------------------------------------------------------------------------
# Если ситуация такова, что в программе могут быть сгенерированы различные типы исключений, то мы можем
# их обработать по отдельности, используя дополнительные выражения except:
try:
    number1 = int(input("Введите первое число: "))
    number2 = int(input("Введите второе число: "))
    print("Результат деления:", number1/number2)
except ValueError: #Если возникнет исключение в результате преобразования строки в число, то оно будет обработано блоком except ValueError
    print("Преобразование прошло неудачно")
except ZeroDivisionError: # Если же второе число будет равно нулю, то есть будет деление на ноль, тогда возникнет исключение ZeroDivisionError
    print("Попытка деления числа на ноль")
except Exception:
    print("Общее исключение")
print("Завершение программы")

#---------------------------------------------------------------------------------------------
# также можно использовать необязательный блок finally. Отличительной особенностью этого блока является то,
# что он выполняется вне зависимости, было ли сгенерировано исключение. Как правило, блок finally применяется
# для освобождения используемых ресурсов, например, для закрытия файлов.
try:
    number = int(input("Введите число: "))
    print("Введенное число:", number)
except ValueError:
    print("Не удалось преобразовать число")
finally:
    print("Блок try завершил выполнение")
print("Завершение программы")


#---------------------------------------------------------------------------------------------
# Получение информации об исключении
# С помощью оператора as мы можем передать всю информацию об исключении в переменную, которую затем можно использовать в блоке except
try:
    number = int(input("Введите число AS: "))
    print("Введенное число:", number)
except ValueError as e:
    print("Сведения об исключении", e)
print("Завершение программы")

#---------------------------------------------------------------------------------------------
# Генерация исключений
# Иногда возникает необходимость вручную сгенерировать то или иное исключение. Для этого применяется оператор raise.
try:
    number1 = int(input("Введите первое число: "))
    number2 = int(input("Введите второе число: "))
    if number2 == 0:
        raise Exception("Второе число не должно быть равно 0") #При вызове исключения мы можем ему передать сообщение, которое затем можно вывести пользователю:
    print("Результат деления двух чисел:", number1/number2)
except ValueError:
    print("Введены некорректные данные")
except Exception as e:
    print(e)
print("Завершение программы")