def calculate_income(rate, money, month):
    if money <= 0:
        return 0

    for i in range(1, month + 1):
        money = round(money + money * rate / 100 / 12, 2)
    return money

# если мы запустим отдельно модуль account.py сам по себе, то ничего на консоли не увидим. Ведь модуль просто
# определяет функцию и невыполняет никаких других действий. Но мы можем сделать так, чтобы модуль account.py мог
# использоваться как сам по себе, так и подключаться в другие модули. для тестирования функции определена
# главная функция main. И мы можем сразу запустить файл account.py отдельно от всех и протестировать код.

def main():
    rate = 10
    money = 100000
    period = 12

    result = calculate_income(rate, money, period)
    print("Параметры счета:\n", "Сумма: ", money, "\n", "Ставка: ", rate, "\n",
          "Период: ", period, "\n", "Сумма на счете в конце периода: ", result)

# если мы будем запускать скрипт account.py отдельно, сам по себе, то Python присвоит
# переменной __name__ значение __main__, далее в выражении if вызовет функцию main из этого же файла.
if __name__ == "__main__":
    main()

# При выполнении модуля среда определяет его имя и присваивает его глобальной переменной __name__ (с обеих сторон
# два подчеркивания). Если модуль является запускаемым, то его имя равно __main__ (также по два подчеркивания
# с каждой стороны). Если модуль используется в другом модуле, то в момент выполнения его имя аналогично названию файла
# без расширения py